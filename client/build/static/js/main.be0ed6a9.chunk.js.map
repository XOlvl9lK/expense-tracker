{"version":3,"sources":["js/components/authPage/components/Login.jsx","js/components/authPage/components/Registration.jsx","js/hooks/http.hook.js","js/context/AuthContext.js","js/components/error/Error.jsx","js/components/authPage/AuthPage.jsx","js/components/mainPage/View.jsx","js/components/loading/Loading.jsx","js/components/mainPage/MainPage.jsx","js/components/historyPage/View.jsx","js/components/historyPage/HistoryPage.jsx","js/components/navbar/Navbar.jsx","js/components/App.js","js/hooks/auth.hook.js","js/routes.js","js/serviceWorker.js","index.js"],"names":["Login","loginForm","changeHandler","loading","loginHandler","keepLogged","checkboxHandler","className","type","placeholder","name","value","email","onChange","event","password","id","onClick","disabled","checked","Registration","registerForm","registerHandler","confirmPassword","useHttp","useState","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Error","AuthPage","setLogin","registration","setRegistration","setLoginForm","setRegisterForm","setKeepLogged","auth","useContext","useEffect","setTimeout","choiceHandler","choice","target","registerFormToSend","toLowerCase","loginFormToSend","TransitionGroup","CSSTransition","classNames","timeout","View","form","addHandler","warning","expenses","balance","expenseByMonth","income","setIncome","expense","setExpense","length","i","Number","amount","prevState","lastTransactions","push","key","date","Date","toLocaleDateString","text","Math","abs","autoComplete","Loading","MainPage","setForm","setExpenses","setExpenseByMonth","setBalance","setWarning","history","useHistory","fetchExpenses","Authorization","monthExpenses","isNaN","currentPage","setCurrentPage","pageNumber","setPageNumber","pageHandler","direction","HistoryPage","Navbar","navHandler","to","document","querySelector","classList","toggle","aria-hidden","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","component","exact","useRoutes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","then","unregister","catch","console"],"mappings":"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","file":"static/js/main.be0ed6a9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Login = ({ loginForm, changeHandler, loading, loginHandler, keepLogged, checkboxHandler }) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"login\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    value={loginForm.email}\r\n                    onChange={event => changeHandler(event, 'login')}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={loginForm.password}\r\n                    onChange={event => changeHandler(event, 'login')}\r\n                />\r\n                <button\r\n                    id=\"login-blur\"\r\n                    onClick={loginHandler}\r\n                    disabled={loading}\r\n                >\r\n                    &#9658;\r\n                </button>\r\n\r\n            </div>\r\n            <div className=\"check\">\r\n                <input type=\"checkbox\" checked={keepLogged} onChange={checkboxHandler}/>\r\n                <p>Keep me logged in</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const Registration = ({ registerForm, changeHandler, registerHandler, loading }) => {\r\n\r\n    return (\r\n        <div className=\"registration\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                value={registerForm.email}\r\n                onChange={changeHandler}\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                value={registerForm.password}\r\n                onChange={changeHandler}\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Repeat Password\"\r\n                name=\"confirmPassword\"\r\n                value={registerForm.confirmPassword}\r\n                onChange={changeHandler}\r\n            />\r\n            <button\r\n                id=\"registration-blur\"\r\n                onClick={registerHandler}\r\n                disabled={loading}\r\n            >\r\n                &#9658;\r\n            </button>\r\n        </div>\r\n    );\r\n};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true);\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body);\r\n                headers['Content-type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, { method, body, headers });\r\n            const data = await response.json();\r\n\r\n            // if (!response.ok) {\r\n            //     throw new Error(data.message || 'Something goes wrong');\r\n            // }\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, error, request, setError, clearError };\r\n};","import { createContext } from 'react';\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false,\r\n});","import React from 'react';\r\n\r\nexport const Error = ({ message }) => {\r\n\r\n    return (\r\n        <div className=\"error-wrap\">\r\n            <div className=\"error\">\r\n                <h2>{message}</h2>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { Login } from \"./components/Login\";\r\nimport { Registration } from \"./components/Registration\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { Error } from \"../error/Error\";\r\n\r\nexport const AuthPage = () => {\r\n    const [ login, setLogin ] = useState(true);\r\n    const [ registration, setRegistration ] = useState(false);\r\n    const [ loginForm, setLoginForm ] = useState({ email: '', password: '' });\r\n    const [ registerForm, setRegisterForm ] = useState({ email: '', password: '', confirmPassword: '' });\r\n    const [ keepLogged, setKeepLogged ] = useState(false);\r\n    const { loading, error, request, clearError, setError } = useHttp();\r\n    const auth = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setTimeout(() => {\r\n                clearError();\r\n            }, 3000);\r\n        }\r\n    }, [error, clearError]);\r\n\r\n    const choiceHandler = (event, choice) => {\r\n        if (choice === 'login') {\r\n            setRegistration(false);\r\n            setTimeout(() => setLogin(true), 200);\r\n        } else if (choice === 'registration') {\r\n            setLogin(false);\r\n            setTimeout(() => setRegistration(true), 200);\r\n        }\r\n    };\r\n\r\n    const changeHandler = (event, type) => {\r\n        if (type === 'login') {\r\n            setLoginForm({ ...loginForm, [event.target.name]: event.target.value });\r\n        } else {\r\n            setRegisterForm({ ...registerForm, [event.target.name]: event.target.value });\r\n        }\r\n    };\r\n\r\n    const registerHandler = async () => {\r\n        let registerFormToSend = { ...registerForm };\r\n        registerFormToSend.email = registerFormToSend.email.toLowerCase();\r\n        try {\r\n            const data = await request('/auth/register', 'POST', { ...registerFormToSend });\r\n            setError(data.message);\r\n            if (data.message === 'User was created') {\r\n                choiceHandler(null, 'login');\r\n            }\r\n        } catch (e) {}\r\n    };\r\n\r\n    const loginHandler = async () => {\r\n        let loginFormToSend = { ...loginForm };\r\n        loginFormToSend.email = loginFormToSend.email.toLowerCase();\r\n        try {\r\n            const data = await request('/auth/login', 'POST', { ...loginFormToSend, keepLogged });\r\n            auth.login(data.token, data.userId);\r\n        } catch (e) {}\r\n    };\r\n\r\n    const checkboxHandler = () => {\r\n        setKeepLogged(!keepLogged);\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth-page\">\r\n            <h1>Welcome to Expense Tracker </h1>\r\n            <hr/>\r\n            <div className=\"buttons\">\r\n                <button onClick={event => choiceHandler(event, 'login')}>\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                    Login\r\n                </button>\r\n                <button onClick={event => choiceHandler(event, 'registration')}>\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                    Registration\r\n                </button>\r\n            </div>\r\n            <TransitionGroup>\r\n                { login &&\r\n                    <CSSTransition classNames=\"swipe-login\" timeout={200}>\r\n                        <Login\r\n                            loginForm={loginForm}\r\n                            changeHandler={changeHandler}\r\n                            loading={loading}\r\n                            loginHandler={loginHandler}\r\n                            keepLogged={keepLogged}\r\n                            checkboxHandler={checkboxHandler}\r\n                        />\r\n                    </CSSTransition>\r\n                }\r\n\r\n                { registration &&\r\n                    <CSSTransition classNames=\"swipe-registration\" timeout={200}>\r\n                        <Registration\r\n                            registerForm={registerForm}\r\n                            changeHandler={changeHandler}\r\n                            loading={loading}\r\n                            registerHandler={registerHandler}\r\n                        />\r\n                    </CSSTransition>\r\n                }\r\n\r\n                {error &&\r\n                <CSSTransition classNames=\"pushup\" timeout={500}>\r\n                    <Error message={error}/>\r\n                </CSSTransition>\r\n                }\r\n            </TransitionGroup>\r\n        </div>\r\n    )\r\n};","import React, { useEffect, useState } from \"react\";\r\n\r\nexport const View = ({\r\n                         form,\r\n                         changeHandler,\r\n                         addHandler,\r\n                         warning,\r\n                         expenses,\r\n                         balance,\r\n                         expenseByMonth\r\n}) => {\r\n    const [ income, setIncome ] = useState(0);\r\n    const [ expense, setExpense ] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setIncome(0);\r\n        setExpense(0);\r\n        if (expenseByMonth.length) {\r\n            for (let i = 0; i < expenseByMonth.length; i++) {\r\n                if (Number(expenseByMonth[i].amount) >=  0) {\r\n                    setIncome(prevState => prevState += Number(expenseByMonth[i].amount));\r\n                } else if (Number(expenseByMonth[i].amount) <  0) {\r\n                    setExpense(prevState => prevState += Number(expenseByMonth[i].amount));\r\n                }\r\n            }\r\n        }\r\n    }, [expenseByMonth]);\r\n\r\n\r\n    let lastTransactions = [];\r\n    if (expenses.length) {\r\n        for (let i = 0; i < expenses.length; i++) {\r\n            if (i < 0) {\r\n                break;\r\n            }\r\n            if (Number(expenses[i].amount) > 0) {\r\n                lastTransactions.push(\r\n                    <p key={expenses[i].date}>\r\n                        <span>\r\n                            {new Date(expenses[i].date).toLocaleDateString()}\r\n                            <span className=\"text-splitter\" />\r\n                            {expenses[i].text}\r\n                        </span>\r\n                        <span>{expenses[i].amount}</span>\r\n                        <span className=\"positive\"/>\r\n                    </p>\r\n                );\r\n            } else {\r\n                lastTransactions.push(\r\n                    <p key={expenses[i].date}>\r\n                        <span>\r\n                            {new Date(expenses[i].date).toLocaleDateString()}\r\n                            <span className=\"text-splitter\" />\r\n                            {expenses[i].text}\r\n                        </span>\r\n                        <span>{expenses[i].amount}</span>\r\n                        <span className=\"negative\" />\r\n                    </p>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-page-wrap\">\r\n            <div className=\"main-page\">\r\n                <h2 className=\"title\">Expense Tracker</h2>\r\n                <hr/>\r\n                <div className=\"balance\">\r\n                    <h3>YOUR BALANCE</h3>\r\n                    <p>&#8381;{balance}</p>\r\n                </div>\r\n\r\n                <div className=\"month\">\r\n                    <p className=\"by-month\">Statistics for the month</p>\r\n                    <div className=\"income\">\r\n                        <h3>INCOME</h3>\r\n                        <p className=\"\">&#8381;{income}</p>\r\n                    </div>\r\n                    <div className=\"expense\">\r\n                        <h3>EXPENSE</h3>\r\n                        <p>&#8381;{Math.abs(expense)}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"last-transactions\">\r\n                    <h3>Last Transactions</h3>\r\n                    <hr/>\r\n                    { lastTransactions.length ? lastTransactions : <p className=\"plug\">No transactions for now</p> }\r\n                </div>\r\n\r\n                <div className=\"new-transaction\">\r\n                    <h3>Add New Transaction</h3>\r\n                    <hr/>\r\n                    <p className=\"text\">Text</p>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter text...\"\r\n                        name=\"text\"\r\n                        value={form.text}\r\n                        onChange={changeHandler}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <p className=\"amount\">Amount</p>\r\n                    <p>(negative - expense, positive - income)</p>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Amount...\"\r\n                        name=\"amount\"\r\n                        value={form.amount}\r\n                        onChange={changeHandler}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    { warning && <p className=\"warning\">{warning}</p>}\r\n                    <button onClick={addHandler}>\r\n                        <span />\r\n                        <span />\r\n                        <span />\r\n                        <span />\r\n                        Add Transaction\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const Loading = () => (\r\n    <div className=\"loading\" />\r\n);","import React, { useState, useContext, useCallback, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport { View } from \"./View\";\r\nimport { Loading } from \"../loading/Loading\";\r\n\r\nexport const MainPage = () => {\r\n    const { token, logout } = useContext(AuthContext);\r\n    const [ form, setForm ] = useState({ text: '', amount: '' });\r\n    const [ expenses, setExpenses ] = useState([]);\r\n    const [ expenseByMonth, setExpenseByMonth ] = useState([]);\r\n    const [ balance, setBalance ] = useState(0);\r\n    const [ warning, setWarning ] = useState('');\r\n    const { request , loading } = useHttp();\r\n    const history = useHistory();\r\n\r\n    const fetchExpenses = useCallback(async () => {\r\n        const { expenses, balance, monthExpenses, message } = await request('/expenses', 'GET', null, {\r\n            Authorization: `Bearer ${token}`\r\n        });\r\n        if (message === 'No authorization') {\r\n            logout();\r\n            history.push('/');\r\n            return;\r\n        }\r\n        setExpenseByMonth(monthExpenses);\r\n        setExpenses(expenses);\r\n        setBalance(balance);\r\n    }, [token, request, logout, history]);\r\n\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, [fetchExpenses]);\r\n\r\n    const changeHandler = event => {\r\n        setForm({ ...form, [event.target.name]: event.target.value });\r\n    };\r\n\r\n    const addHandler = async () => {\r\n        if (warning) {\r\n            setWarning('');\r\n        }\r\n        if (!(form.text.length < 30 && !isNaN(Number(form.amount)) && form.amount && form.text)) {\r\n            return setWarning('Incorrect input');\r\n        }\r\n        try {\r\n            await request('/expenses/add', 'POST', { ...form }, {\r\n                Authorization: `Bearer ${token}`\r\n            });\r\n            setForm({ text: '', amount: '' });\r\n            fetchExpenses();\r\n        } catch (error) {}\r\n    };\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !loading &&\r\n                <View\r\n                    warning={warning}\r\n                    form={form}\r\n                    changeHandler={changeHandler}\r\n                    addHandler={addHandler}\r\n                    expenses={expenses}\r\n                    balance={balance}\r\n                    expenseByMonth={expenseByMonth}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n};","import React, { useState } from \"react\";\r\n\r\nexport const View = ({ expenses }) => {\r\n    const [ currentPage, setCurrentPage ] = useState(0);\r\n    const [ pageNumber, setPageNumber ] = useState(0);\r\n\r\n    let history = [];\r\n    if (expenses.length) {\r\n        for (let i = currentPage; i < currentPage + 8; i++) {\r\n            if (i >= expenses.length) {\r\n                break;\r\n            }\r\n            if (Number(expenses[i].amount >= 0)) {\r\n                history.push(\r\n                    <p key={expenses[i].date}>\r\n                        <span>\r\n                            {new Date(expenses[i].date).toLocaleDateString()}\r\n                            <span className=\"text-splitter\"/>\r\n                            {expenses[i].text}\r\n                        </span>\r\n                        <span>{expenses[i].amount}</span>\r\n                        <span className=\"positive\"/>\r\n                    </p>\r\n                );\r\n            } else {\r\n                history.push(\r\n                    <p key={expenses[i].date}>\r\n                        <span>\r\n                            {new Date(expenses[i].date).toLocaleDateString()}\r\n                            <span className=\"text-splitter\"/>\r\n                            {expenses[i].text}\r\n                        </span>\r\n                        <span>{expenses[i].amount}</span>\r\n                        <span className=\"negative\"/>\r\n                    </p>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const pageHandler = (event, direction) => {\r\n        if (direction === 'left' && pageNumber !== 0) {\r\n            setPageNumber(pageNumber - 1);\r\n            setCurrentPage(currentPage - 8);\r\n        } else if (direction === 'right' && (currentPage < expenses.length - 8)) {\r\n            setPageNumber(pageNumber + 1);\r\n            setCurrentPage(currentPage + 8);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"history-wrap\">\r\n            <h2 className=\"title\">History</h2>\r\n\r\n            <div className=\"history\">\r\n                { expenses.length ? history : <p className=\"plug\">No transactions for now</p> }\r\n            </div>\r\n            { expenses.length > 8 ?\r\n                <div className=\"navigation\">\r\n                    <span className=\"arrow-left\" onClick={event => pageHandler(event, 'left')}>\r\n                        &#171;\r\n                    </span>\r\n                    <span>{pageNumber + 1}</span>\r\n                    <span className=\"arrow-right\" onClick={event => pageHandler(event, 'right')}>\r\n                        &#187;\r\n                    </span>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n\r\n        </div>\r\n    )\r\n};","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\nimport { Loading } from \"../loading/Loading\";\r\nimport { View } from \"./View\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\n\r\nexport const HistoryPage = () => {\r\n    const { token } = useContext(AuthContext);\r\n    const [ expenses, setExpenses ] = useState([]);\r\n    const { loading, request } = useHttp();\r\n\r\n    const fetchExpenses = useCallback(async () => {\r\n        try {\r\n            const { expenses } = await request('/expenses/history', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            });\r\n            setExpenses(expenses);\r\n        } catch (error) {}\r\n    }, [token, request]);\r\n\r\n    useEffect(() => {\r\n        fetchExpenses();\r\n    }, [fetchExpenses]);\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !loading &&\r\n                <View expenses={expenses} />\r\n            }\r\n        </>\r\n    );\r\n};","import React, { useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\n\r\nexport const Navbar = () => {\r\n    const { logout } = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    const logoutHandler = () => {\r\n        logout();\r\n        history.push('/')\r\n    };\r\n\r\n    const navHandler = (event, to) => {\r\n        document.querySelector('.active').classList.toggle('active');\r\n        event.target.classList.toggle('active');\r\n\r\n        if (to === '/main') {\r\n            history.push(to);\r\n        }\r\n        if (to === '/history') {\r\n            history.push(to);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"navbar container\">\r\n            <ul>\r\n                <li onClick={event => navHandler(event, '/main')} className=\"active\">Tracker</li>\r\n                <li onClick={event => navHandler(event, '/history')}>History</li>\r\n                <li onClick={logoutHandler}><i className=\"fa fa-sign-out\" aria-hidden=\"true\" /></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { useRoutes } from \"../routes\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { useAuth } from \"../hooks/auth.hook\";\nimport { Navbar } from \"./navbar/Navbar\";\n\nfunction App() {\n    const { token, login, logout, userId } = useAuth();\n    const isAuthenticated = !!token;\n    const routes = useRoutes(isAuthenticated);\n\n    return (\n        <AuthContext.Provider value={{\n            token, login, logout, userId\n        }}>\n            <BrowserRouter>\n                <div className=\"container\">\n                    {routes}\n                    { isAuthenticated && <Navbar /> }\n                </div>\n            </BrowserRouter>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nconst storageName = 'expenseTracker';\r\n\r\nexport const useAuth = () => {\r\n    const [ token, setToken ] = useState(null);\r\n    const [ ready, setReady ] = useState(false);\r\n    const [ userId, setUserId ] = useState(null);\r\n\r\n    const login = useCallback((jwtToken, id) => {\r\n        setToken(jwtToken);\r\n        setUserId(id);\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken\r\n        }));\r\n    }, []);\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        setUserId(null);\r\n        localStorage.removeItem(storageName);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName));\r\n\r\n        if (data && data.token) {\r\n            login(data.token, data.userId);\r\n        }\r\n        setReady(true);\r\n    }, [login]);\r\n\r\n    return { login, logout, token, userId, ready }\r\n};","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { AuthPage } from \"./components/authPage/AuthPage\";\r\nimport { MainPage } from \"./components/mainPage/MainPage\";\r\nimport { HistoryPage } from \"./components/historyPage/HistoryPage\";\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/main\" component={MainPage} />\r\n                <Route path=\"/history\" component={HistoryPage} />\r\n                <Route path=\"*\" component={MainPage} />\r\n            </Switch>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={AuthPage} />\r\n            <Route path=\"*\" component={AuthPage} />\r\n        </Switch>\r\n    );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './js/components/App';\nimport * as serviceWorker from './js/serviceWorker';\nimport './scss/style.scss'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}